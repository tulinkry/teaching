{block heading}<h1>Výuka <small>Kryštof Tulinger <small>tulinkry@fit.cvut.cz</small></small></h1>{/block}

{block content}


<div class="col-lg-6">
	<div class="row">
		<h2>Aktuální hodiny <small>2017</small></h2>
		<table class="table">
			<thead>
				<tr>
					<th>Předmět</th>
					<th>Den</th>
					<th>Hodina</th>
					<th>Učebna</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td><a href="{link Subject:year, subject => 'PA2', year => '2017_CT_11_00'}">PA2</a></td>
					<td>Čtvrtek</td>
					<td>11:00 - 12:30</td>
					<td>TK:PU1</td>
				</tr>
				<tr>
					<td><a href="{link Subject:year, subject => 'PA2', year => '2017_CT_12_45'}">PA2</a></td>
					<td>Čtvrtek</td>
					<td>12:45 - 14:15</td>
					<td>TK:PU1</td>
				</tr>
			</tbody>
		</table>
	</div>


	<h3>Kompilace</h3>
	<p>Výborně sepsána v <a href="http://vyuka.bernhauer.cz/pa1-clanky/kompilujeme" title="Jak kompilujeme" target="_blank">článku</a> od Davida Bernauera</p>

	<h4>O souboru <a href="#gcc-install" data-toggle="collapse" role="button" title="Instalace gcc/g++" aria-expanded="false">gcc/g++</a></h4>
	<div id="gcc-install" class="collapse">
		<div class="well">
			<h5>Instalace gcc/g++</h5>
			<pre><code class="bash">$ sudo apt-get install gcc</code></pre>
			<pre><code class="bash">$ sudo apt-get install g++</code></pre>
			<pre><code class="bash">$ yum install gcc</code></pre>
			<pre><code class="bash">$ yum install g++</code></pre>
		</div>
	</div>

	<p>Používáme binárku <code>gcc</code> nebo <code>g++</code>. Tento soubor má velké množství přepínačů, ze kterých bych pro předměty PA1 nebo PA2 označil následující skupinu jako důležitou:

		<dl>
			<dt>--version</dt>
			<dd>Vypíše informaci o aktuálně nainstalované verzi</dd>
			<dt>--help</dt>
			<dd>Vypíše stručné informace, jak příkaz použít</dd>
			<dt>-o</dt>
			<dd>Vygenerovat výstup do souboru. Pokud neuvedete tento přepínač, kód se vždy kompiluje do souboru <code>a.out</code></dd>
			<dt>-Wall</dt>
			<dd>Zapne všechny upozornění (v překladu Warning = all)</dd>
			<dt>-pedantic</dt>
			<dd>Kompilátor hodností přísněji váš kód - hlásí nepoužité proměnné aj.</dd>
			<dt>-l&lt;library&gt;</dt>
			<dd>Přilinkuje žádanou knihovnu (malé L)</dd>
			<dt>-I&lt;path&gt;</dt>
			<dd>Přidá cestu mezi seznam adresářů, kde se vyhledávají hlavičkové soubory (velké i)</dd>
			<dt>-MM</dt>
			<dd>Kompilátor vygeneruje seznam závislostí - vhodné do makefile</dd>
			<dt>-S</dt>
			<dd>Zajímavost - vygeneruje asembler kód</dd>
		</dl>

		Více informací viz:
		<pre><code class="bash">$ man gcc
$ man g++
$ gcc --help
$ g++ --help</code></pre>
	</p>

	<h4>Vstupní soubory</h4>

	<p>Uvedenému příkazu lze následně předhodit libovolné množství souborů pro kompilaci, tedy například:
		<pre><code class="bash">$ gcc -Wall -pedantic main.c utils.c</code></pre>
		a kompilátor, pokud je to možné, složí výsledný program.
	</p>

	<h4>Návratová hodnota</h4>

	<p>Návratová hodnota kompilátoru je <code>0</code> při úspěšné kompilaci a různá od <code>0</code> při neúspěchu. Toho se dá vhodně využít například pro překlad a spuštění:
	<pre><code class="bash">$ gcc main.c -o main && ./main</code></pre>
	</p>

</div>


<div class="col-lg-6">
	<h3>Spuštění programu</h3>
	<p>Předpokládejme, že vaše zkompilovaná verze je soubor <code>a.out</code> v aktuálním adresáři</p>
	<h4>Holé spuštění</h4>
	<p>
		<pre><code class="bash">$ ./a.out</code></pre>
	</p>
	<h4>Spuštění se souborem na standardním vstupu</h4>
	<p>
		<pre><code class="bash"># poslání vstupu přes pipe
$ cat input.txt | ./a.out
# poslání vstupu přes přesměrování
$ ./a.out < input.txt</code></pre>
	</p>
	<h4>Spuštění s přesměrováním výstupu do souboru</h4>
	<p>
		<pre><code class="bash"># výstup do souboru
$ ./a.out > output.txt
# přidání na konec souboru
$ ./a.out >> output.txt
# výstup stderr a stdin do souboru
$ ./a.out > output_err_and_std.txt 2>&1</code></pre>
	</p>
	<h4>Spuštění včetně měření času</h4>
	<p>
		<pre><code class="bash">$ time ./a.out</code></pre>
	</p>
	<h4>Spuštění s <a href="#valgrind-install" data-toggle="collapse" role="button" title="Instalace valgrindu" aria-expanded="false">valgrindem</a></h4>
	<div id="valgrind-install" class="collapse">
		<div class="well">
			<h5>Instalace valgrindu</h5>
			<pre><code class="bash">$ sudo apt-get install valgrind</code></pre>
			<pre><code class="bash">$ yum install valgrind</code></pre>
		</div>
	</div>
	<p>
		<a href="http://valgrind.org/docs/manual/quick-start.html" target="_blank" title="Valgrind">Valgrind</a> je nástroj na kontrolu práce s pamětí. Běh vašeho programu je analyzován a každé podezřelé chování s pamětí (používání 	neinicializovaných proměnných, přístup mimo povolené hranice, ...) je nahlášeno. Nutno podotknout, že i když valgrind nehlásí žádné problémy, tak to <b>neznamená</b>, že váš program je v pořádku. Znamená to pouze, že váš program správně pracuje s pamětí pro testovací data, která jste mu poskytli.
	</p>
	<p>
		<pre><code class="bash">$ valgrind --leak-check=full --show-kinds=all --track-origins=yes ./a.out</code></pre>
	</p>


	<h3>Vstupy ze souboru</h3>
	<p>Předpokládejme, že vaše zkompilovaná verze je soubor <code>a.out</code> v aktuálním adresáři</p>
	<h4>Předání vstupu z příkazu echo</h4>
	<p>
		<pre><code class="bash">$ echo "vstup" | ./a.out</code></pre>
	</p>
	<h4>Předání vstupu ze souboru</h4>
	<p>
		<pre><code class="bash">$ ./a.out < input.txt</code></pre>
	</p>
	<h4>Předání vstupu ze souboru po řádkách</h4>
	<p>Nefunguje, pokud je na jedné řádce více informací oddělených bílými znaky - váš program se spustí pro každou takovou informaci (ne pro celou řádku).</p>
	<p>
		<pre><code class="bash">$ for line in $(cat input.txt); do echo "$line" | ./a.out; done</code></pre>
	</p>
	<h4>Předání vstupu ze souboru po řádkách</h4>
	<p>Funguje vždy (i na problém v předchozím případě), tentokrát správně interpretuje řádky s více informacemi</p>
	<p>
		<pre><code class="bash">$ while read -r line; do echo "$line" | ./a.out; done < input.txt</code></pre>
	</p>
	<h4>Předání výstupu programu</h4>
	<p>
		<pre><code class="bash"># výstup do souboru
$ ./a.out > output.txt
# přidání na konec souboru
$ ./a.out >> output.txt
# výstup stderr a stdin do souboru
$ ./a.out > output_err_and_std.txt 2>&1</code></pre>
	</p>
	<h4>Vhodné spuštění pro testování</h4>
	<p>
		<pre><code class="bash">$ [ -f output.txt ] && rm output.txt; \
while read -r line; \
	do echo "$line" | ./a.out >> output.txt; \
done < input.txt; \
diff output.txt ref-output.txt</code></pre>
	</p>
</div>

{/block}
